// btsync-cli v0.2 by sergeyfast
package main

import (
	"flag"
	"log"
	"btsync"
	"fmt"
	"path/filepath"
)

const (
	DefaultHost     = "127.0.0.1"
	DefaultPassword = "password"
)

var host, port, user, password, addPath, delPath, secret string
var verbose, listFolders, generateSecret, resolvePath bool

// Fatal on Error
func err(err error) {
	if err != nil {
		log.Fatal(err)
	}
}

func main() {
	flag.StringVar(&host, "host", DefaultHost, "btsync webui hostname")
	flag.StringVar(&port, "port", "8888", "btsync webui port")
	flag.StringVar(&user, "u", "admin", "username")
	flag.StringVar(&password, "p", DefaultPassword, "password")
	flag.StringVar(&addPath, "a", "", "absolute path to add for index (-r for relative path support)")
	flag.StringVar(&delPath, "d", "", "absolute path to delete from index (-r for relative path support)")
	flag.StringVar(&secret, "s", "", "secret, if empty will be autogenerated")
	flag.BoolVar(&listFolders, "l", false, "list folders")
	flag.BoolVar(&generateSecret, "g", false, "get new secret")
	flag.BoolVar(&resolvePath, "r", false, "resolve relative path (for -a and -d)")
	flag.BoolVar(&verbose, "v", false, "verbose mode on")

	flag.Parse()
	btsync.Debug = verbose

	c := btsync.NewClient(host, port, user, password);
	if !c.RequestToken() {
		log.Print("Can't get token")
		return
	}

	switch {
	case addPath != "" :
		if resolvePath {
			addPath, _ = filepath.Abs(addPath)
		}

		ra := c.AddSyncFolder(addPath, secret)
		err(ra.Err)

		if ra.Error == 0 {
			fmt.Println("Folder was added to sync folders")
			fmt.Printf("Folder:\t%s\n", addPath)
			fmt.Printf("Secret:\t%s\n", ra.Secret.Secret)
			fmt.Printf("RO:\t%s\n", ra.ROSecret)
			fmt.Printf("Status: %d\n", ra.Error)
		} else {
			fmt.Println(ra.Message)
			fmt.Printf("Folder:\t%s\n", addPath)
			fmt.Printf("Status: %d\n", ra.Error)
		}

	case delPath != "" :
		if resolvePath {
			delPath, _ = filepath.Abs(delPath)
		}

		ra := c.RemoveSyncFolder(delPath, secret)
		err(ra.Err)

		if ra.Error == 0 {
			fmt.Println("Folder was removed from sync folders")
			fmt.Printf("Status: %d\n", ra.Error)
		} else {
			fmt.Println(ra.Message)
			fmt.Printf("Folder:\t%s\n", delPath)
			fmt.Printf("Status: %d\n", ra.Error)
		}
	case listFolders:
		fi, err1 := c.Folders()
		err(err1)

		if len(fi.Folders) > 0 {
			for i := 0; i < len(fi.Folders); i ++ {
				f := fi.Folders[i]
				// utf-8 to win1252 failed to convert ;(
				fmt.Printf("%s\t%s\t%s\n", f.Secret, f.Size, f.Name)
			}
		}
	case generateSecret:
		s, err1 := c.GenerateSecret()
		err(err1)

		fmt.Printf("Secret:\t%s\n", s.Secret)
		fmt.Printf("RO:\t%s\n", s.ROSecret)
	case addPath == "" && delPath == "":
		log.Fatal("Use -a, -d, -l or -g flags. Flag -h for help.")
	}
}
